提前取出1/4部分，保留svs原始算法结构，数组赋值等都可以用上assign和copy，不需要for去遍历

// 提前预取，保留原始svs算法
InvertedIndex SVS_MPI2(int* queryList, vector<InvertedIndex>& index, int num, int rank, int size) {
	// 取最短的列表
	int initialLength = index[queryList[0]].length;
	InvertedIndex s;// 取工作范围1/4
	int start = (initialLength / size) * rank,
		end = rank != size - 1 ? (initialLength / size) * (rank + 1) : initialLength;// 末尾特殊处理
	s.docIdList.assign(index[queryList[0]].docIdList.begin() + start, index[queryList[0]].docIdList.begin() + end);
	s.length = s.docIdList.size();

	// 与剩余列表求交
	for (int i = 1; i < num; i++) {
		int count = 0;// s从头往后遍历一遍
		int t = 0;

		if (s.length == 0)break;
		// 预处理加速大概率事件
		t = rank * (index[queryList[i]].length / size);
		for (int j = 2 * rank; j > 0; j--) {
			if (s.docIdList[0] < index[queryList[i]].docIdList[t])
				t -= (index[queryList[i]].length / size) / 2;
			else break;
		}

		// s列表中的每个元素都拿出来比较
		for (int j = 0; j < s.length; j++) {// 所有元素都得访问一遍
			bool isFind = false;// 标志，判断当前count位是否能求交

			for (; t < index[queryList[i]].length; t++) {
				// 遍历i列表中所有元素
				if (s.docIdList[j] == index[queryList[i]].docIdList[t]) {
					isFind = true;
					break;
				}
				else if (s.docIdList[j] < index[queryList[i]].docIdList[t])// 升序排列
					break;
			}
			if (isFind)// 覆盖
				s.docIdList[count++] = s.docIdList[j];
		}
		if (count < s.length)// 最后才做删除
			s.docIdList.erase(s.docIdList.begin() + count, s.docIdList.end());
		s.length = count;
	}

	// 进程通信
	//// 用0号进程做收集
	//if (rank == 0) {
	//	for (int i = 1; i < size; i++) {
	//		int count;
	//		MPI_Recv(&count, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	//		unsigned int* temp;// 转成int数组发送
	//		temp = new unsigned int[count];
	//		// 接受数据
	//		MPI_Recv(temp, count, MPI_UNSIGNED, i, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
	//		s.docIdList.insert(s.docIdList.end(), temp, temp + count);
	//		delete []temp;
	//	}
	//	s.length = s.docIdList.size();
	//}
	//// 非0号线程则把vector发送过去
	//else {
	//	unsigned int* temp;// 转成int数组发送
	//	temp = new unsigned[s.length];
	//	copy(s.docIdList.begin(), s.docIdList.end(), temp);
	//	MPI_Send(&s.length, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);// 先发一个长度过去
	//	MPI_Send(temp, s.length, MPI_UNSIGNED, 0, 1, MPI_COMM_WORLD);// 再把数据发过去
	//	delete []temp;
	//}

	// 修改通信机制，将长度放入数组0号位置
	// 用0号进程做收集
	MPI_Barrier(MPI_COMM_WORLD);// 保证在同一个函数步内
	if (rank == 0) {
		unsigned int* temp;// 转成int数组发送
		//int maxLen = max(initialLength / size, initialLength - initialLength / size * (size - 1));
		temp = new unsigned int[initialLength];// 节省空间实测比开个大的还慢？
		for (int i = 1; i < size; i++) {
			// 接受数据
			MPI_Recv(temp, initialLength, MPI_UNSIGNED, MPI_ANY_SOURCE, MPI_ANY_TAG, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			int len = temp[0];
			s.docIdList.insert(s.docIdList.end(), temp+1, temp +1+len);
		}
		delete[]temp;
		s.length = s.docIdList.size();
	}
	// 非0号线程则把vector发送过去
	else {
		unsigned int* temp;// 转成int数组发送
		temp = new unsigned[s.length+1];
		temp[0] = s.length;
		copy(s.docIdList.begin(), s.docIdList.end(), temp+1);
		// 直接一起发过去
		MPI_Send(temp, s.length+1, MPI_UNSIGNED, 0, 1, MPI_COMM_WORLD);// 再把数据发过去
		delete []temp;
	}

	return s;
}


int main(int argc, char* argv[])
{
	//testMPI(argc,argv);
	// 读取二进制文件
	fstream file;
	file.open("ExpIndex", ios::binary | ios::in);
	if (!file.is_open()) {
		printf("Wrong in opening file!\n");
		return 0;

	}
	static vector<InvertedIndex>* invertedLists = new vector<InvertedIndex>();
	for (int i = 0; i < 2000; i++)		//总共读取2000个倒排链表
	{
		InvertedIndex* t = new InvertedIndex();				//一个倒排链表
		file.read((char*)&t->length, sizeof(t->length));
		for (int j = 0; j < t->length; j++)
		{
			unsigned int docId;			//文件id
			file.read((char*)&docId, sizeof(docId));
			t->docIdList.push_back(docId);//加入至倒排表
		}
		sort(t->docIdList.begin(), t->docIdList.end());//对文档编号排序
		invertedLists->push_back(*t);		//加入一个倒排表
	}
	file.close();
	printf("here\n");

	// 读取查询数据
	file.open("ExpQuery", ios::in);
	static int query[1000][5] = { 0 };// 单个查询最多5个docId,全部读取
	string line;
	int count = 0;

	while (getline(file, line)) {// 读取一行
		stringstream ss; // 字符串输入流
		ss << line; // 传入这一行
		int i = 0;
		int temp;
		ss >> temp;
		while (!ss.eof()) {
			query[count][i] = temp;
			i++;
			ss >> temp;
		}
		count++;// 总查询数
	}

	//------初始化MPI------
	MPI_Init(&argc, &argv);
	int rank, size;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	printf("-----process%d start-----\n", rank);

	//------求交------
	long long head, tail, freq;
	QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
	QueryPerformanceCounter((LARGE_INTEGER*)&head);// Start Time

	//preprocessing(*invertedLists, 2000);
	for (int i = 0; i < count; i++) {// count个查询
		int num = 0;// query查询项数
		for (int j = 0; j < 5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int* list = new int[num];// 要传入的list
		for (int j = 0; j < num; j++) {
			list[j] = query[i][j];
		}
		sorted(list, *(invertedLists), num);// 按长度排序
		MPI_Barrier(MPI_COMM_WORLD);// 保证在同一个函数步内
		InvertedIndex res = SVS_MPI2(list, *invertedLists, num, rank, size);
		//printf("%d\n",i);
	}

	printf("-----process%d finished-----\n", rank);

	// 让一个进程输出
	QueryPerformanceCounter((LARGE_INTEGER*)&tail);// End Time
	printf("%f\n", (tail - head) * 1000.0 / freq);

	MPI_Finalize();
}