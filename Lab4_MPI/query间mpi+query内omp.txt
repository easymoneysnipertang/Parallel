// query间mpi+query内omp
InvertedIndex SVS_omp(int* queryList, vector<InvertedIndex>& index, int num)
{
	InvertedIndex s = index[queryList[0]];// 取最短的列表
	int count = 0;
	// 与剩余列表求交
#pragma omp parallel num_threads(NUM_THREADS),shared(count)
	for (int i = 1; i < num; i++) {
		count = 0;// s从头往后遍历一遍
		int t = 0;
		// s列表中的每个元素都拿出来比较
#pragma omp for
		for (int j = 0; j < s.docIdList.size(); j++) {// 所有元素都得访问一遍
			bool isFind = false;// 标志，判断当前count位是否能求交
			
			for (; t < index[queryList[i]].docIdList.size(); t++) {
				// 遍历i列表中所有元素
				if (s.docIdList[j] == index[queryList[i]].docIdList[t]) {
					isFind = true;
					break;
				}
				else if (s.docIdList[j] < index[queryList[i]].docIdList[t])// 升序排列
					break;
			}
#pragma omp critical
			if (isFind)
				s.docIdList[count++] = s.docIdList[j];
		}
#pragma omp single
		if (count < s.docIdList.size())
			s.docIdList.erase(s.docIdList.begin() + count, s.docIdList.end());
	}
	return s;
}


int main(int argc, char* argv[])
{
	//testMPI(argc,argv);
	// 读取二进制文件
	fstream file;
	file.open("ExpIndex", ios::binary | ios::in);
	if (!file.is_open()) {
		printf("Wrong in opening file!\n");
		return 0;

	}
	static vector<InvertedIndex>* invertedLists = new vector<InvertedIndex>();
	for (int i = 0; i < 2000; i++)		//总共读取2000个倒排链表
	{
		InvertedIndex* t = new InvertedIndex();				//一个倒排链表
		file.read((char*)&t->length, sizeof(t->length));
		for (int j = 0; j < t->length; j++)
		{
			unsigned int docId;			//文件id
			file.read((char*)&docId, sizeof(docId));
			t->docIdList.push_back(docId);//加入至倒排表
		}
		sort(t->docIdList.begin(), t->docIdList.end());//对文档编号排序
		invertedLists->push_back(*t);		//加入一个倒排表
	}
	file.close();
	printf("here\n");

	// 读取查询数据
	file.open("ExpQuery", ios::in);
	static int query[1000][5] = { 0 };// 单个查询最多5个docId,全部读取
	string line;
	int count = 0;

	while (getline(file, line)) {// 读取一行
		stringstream ss; // 字符串输入流
		ss << line; // 传入这一行
		int i = 0;
		int temp;
		ss >> temp;
		while (!ss.eof()) {
			query[count][i] = temp;
			i++;
			ss >> temp;
		}
		count++;// 总查询数
	}

	//------初始化MPI------
	int provided;// 多线程
	MPI_Init_thread(&argc, &argv, MPI_THREAD_FUNNELED, &provided);
	if (provided < MPI_THREAD_FUNNELED)// 提供的等级不够
		MPI_Abort(MPI_COMM_WORLD, 1);

	//MPI_Init(&argc, &argv);
	int rank, size;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	printf("-----process%d start-----\n", rank);

	//------求交------
	long long head, tail, freq;
	if (rank == 0) {// 一个进程输出
		QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
		QueryPerformanceCounter((LARGE_INTEGER*)&head);// Start Time
	}

	int length = floor(count / size);// 每个进程处理的length
	int start = length * rank;
	int end = rank != size - 1 ? length * (rank + 1) : count;// 考虑末尾

	//preprocessing(*invertedLists, 2000);
	for (int i = start; i < end; i++) {// count个查询
		int num = 0;// query查询项数
		for (int j = 0; j < 5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int* list = new int[num];// 要传入的list
		for (int j = 0; j < num; j++) {
			list[j] = query[i][j];
		}
		sorted(list, *(invertedLists), num);// 按长度排序
		InvertedIndex res = SVS_omp(list, *invertedLists, num);
		//printf("%d\n", i);
	}

	MPI_Barrier(MPI_COMM_WORLD);// 进程同步
	printf("-----process%d finished-----\n", rank);

	// 让一个进程输出
	if (rank == 0) {
		QueryPerformanceCounter((LARGE_INTEGER*)&tail);// End Time
		printf("%f\n", (tail - head) * 1000.0 / freq);
	}

	MPI_Finalize();
}