InvertedIndex SVS_MPI_Precise_SSE(int* queryList, vector<InvertedIndex>& index, int num, int rank, int size) {
	//每个进程的最短倒排链表的开始位置和结束位置
	int initialLength = index[queryList[0]].docIdList.size();
	InvertedIndex s;// 取工作范围1/4
	int start = (initialLength / size) * rank,
		end = rank != size - 1 ? (initialLength / size) * (rank + 1) : initialLength;// 末尾特殊处理
	s.docIdList.assign(index[queryList[0]].docIdList.begin() + start, index[queryList[0]].docIdList.begin() + end);
	s.length = s.docIdList.size();

	// 构造数据结构保存其余链表求交范围
	QueryItem* list = new QueryItem[num]();
	for (int i = 0; i < num; i++)// 预处理,关键字赋值
		list[i].key = queryList[i];
	//找到剩余倒排链表的起始位置和结束位置
	int* from = new int[num - 1];
	int* to = new int[num - 1];
	for (int i = 1; i < num; i++) {
		//找到自己的开始位置
		from[i - 1] = find1stGreaterEqual(index[list[i].key].docIdList, index[list[0].key].docIdList[start]);
		list[i].cursor = from[i - 1];

	}
	if (rank != size - 1) {
		//最后一个进程不需要知道自己何时结束，因为它直接扫描到最后
		MPI_Recv(to, num - 1, MPI_INT, rank + 1, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);//从下一个进程接受该进程的起始位置
		for (int i = 1; i < num; i++) {
			list[i].end = to[i - 1];//下一个进程的开始正是这个进程的结束位置
		}
	}
	else {
		for (int i = 1; i < num; i++) {
			//最后一个进程做到底
			list[i].end = index[list[i].key].docIdList.size();
		}
	}
	if (rank != 0) {
		//第一个进程不用发送信息，其余发送给前一个进程
		MPI_Send(from, num - 1, MPI_INT, rank - 1, 1, MPI_COMM_WORLD);
	}


	// 与剩余列表求交
	for (int i = 1; i < num; i++) {
		int count = 0;// s从头往后遍历一遍

		// s列表中的每个元素都拿出来比较
		for (int j = 0; j < s.length; j++) {// 所有元素都得访问一遍
			bool isFind = false;// 标志，判断当前count位是否能求交

			__m128i ss = _mm_set1_epi32(s.docIdList[j]);// 填充32位

			for (; list[i].cursor < list[i].end - 3; list[i].cursor += 4) {// 同时与四个元素比较
				// 遍历i列表中所有元素
				__m128i ii;
				ii = _mm_load_si128((__m128i*) & index[queryList[i]].docIdList[list[i].cursor]);// 一次取四个
				__m128i tmp = _mm_set1_epi32(0);
				tmp = _mm_cmpeq_epi32(ss, ii);// 比较向量每一位
				int mask = _mm_movemask_epi8(tmp);// 转为掩码，如果有一个数相等,就不会是全0

				if (mask != 0) {// 查看比较结果
					isFind = true;
					break;
				}
				else if (s.docIdList[j] < index[queryList[i]].docIdList[list[i].cursor])// 及时break，避免超过，下一元素需重头再来
					break;
			}
			if (!isFind && (list[i].cursor >= list[i].end - 3)) {// 处理剩余元素
				for (; list[i].cursor < list[i].end; list[i].cursor++)
				{
					if (s.docIdList[j] == index[queryList[i]].docIdList[list[i].cursor]) {
						isFind = true;
						break;
					}
					else if (s.docIdList[j] < index[queryList[i]].docIdList[list[i].cursor])// 升序排列
						break;
				}
			}
			if (isFind)// 覆盖
				s.docIdList[count++] = s.docIdList[j];
		}
		if (count < s.length)// 最后才做删除
			s.docIdList.erase(s.docIdList.begin() + count, s.docIdList.end());
		s.length = count;
	}

	// 进程通信
	// 用0号进程做收集
	if (rank == 0) {
		for (int i = 1; i < size; i++) {
			int count;
			MPI_Recv(&count, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			unsigned int* temp;// 转成int数组发送
			temp = new unsigned int[count];
			// 接受数据
			MPI_Recv(temp, count, MPI_UNSIGNED, i, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			s.docIdList.insert(s.docIdList.end(), temp, temp + count);
			delete[]temp;
		}
		s.length = s.docIdList.size();
	}
	// 非0号线程则把vector发送过去
	else {
		unsigned int* temp;// 转成int数组发送
		temp = new unsigned[s.length];
		copy(s.docIdList.begin(), s.docIdList.end(), temp);
		MPI_Send(&s.length, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);// 先发一个长度过去
		MPI_Send(temp, s.length, MPI_UNSIGNED, 0, 1, MPI_COMM_WORLD);// 再把数据发过去
		delete[]temp;
	}

	return s;
}