首先需要barrier同步（进入svs前），保证四个进程都在做同一个查询（同一个函数步），这样才能保证传递的length是一个length
其次 因为是分布式内存，就svs算法而言，不能每次重新确定begin和end，要处理的那一段数据是定死的。两种办法，一种是提前取出那1/4，然后按照svs算法正常做。另一种是修改下svs算法，不去删链表，没匹配的置为0。
在发送接受阶段，0号进程定义倒排列表把答案全部push_back进来保存。发送数据时先发送长度，再发送数据。保证第一个的tag为0，第二个为1。还不能随便用MPI_ANYSOURCE，如果要用后面得把status用上。

下面是做的是：修改svs算法，同时i从1遍历到size依次接受，没有用MPI_ANYSOURCE。
InvertedIndex SVS_MPI(int* queryList, vector<InvertedIndex>& index, int num,int rank,int size){
	InvertedIndex s = index[queryList[0]];// 取最短的列表
	int initialLength = s.length;

	// 获取工作范围
	int begin = rank * (initialLength / size), end = min((rank + 1) * (initialLength / size),initialLength);

	// 与剩余列表求交
	for (int i = 1; i < num; i++) {
		int t = 0;

		// 预处理加速大概率事件
		t = rank * (index[queryList[i]].length / size);
		for (int j = 2*rank; j > 0; j--) {
			if (s.docIdList[begin] < index[queryList[i]].docIdList[t])
				t -= (index[queryList[i]].length / size) / 2;
			else break;
		}

		// s列表中的每个元素都拿出来比较
		for (int j = begin; j < end; j++) {// 所有元素都得访问一遍
			bool isFind = false;// 标志，判断当前count位是否能求交

			for (; t < index[queryList[i]].length; t++) {
				// 遍历i列表中所有元素
				if (s.docIdList[j] == index[queryList[i]].docIdList[t]) {
					isFind = true;
					break;
				}
				else if (s.docIdList[j] < index[queryList[i]].docIdList[t])// 升序排列
					break;
			}
			if (!isFind)// 没找到合适的，该位置置为0
			{
				s.docIdList[j] = 0;
			}
		}
	}

	InvertedIndex result;
	// 用0号进程做收集
	if (rank == 0) {
		// 把该部分求交有效的拿出来->为了通信
		for (int i = begin; i < end; i++) {
			if (s.docIdList[i] != 0) {
				result.docIdList.push_back(s.docIdList[i]);
				result.length++;
			}
		}

		for (int i = 1; i < size; i++) {
			int count;
			MPI_Recv(&count, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			unsigned int* temp;// 转成int数组发送
			temp = new unsigned int[count];

			MPI_Recv(temp, count, MPI_UNSIGNED, i, 1, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
			for (int j = 0; j < initialLength / size; j++) {
				if (temp[j] == 0)break;
				result.docIdList.push_back(temp[j]);
			}
			delete temp;
		}
		result.length = result.docIdList.size();
	}
	// 非0号线程则把vector发送过去
	else {
		unsigned int* temp;// 转成int数组发送
		temp = new unsigned[initialLength/size];
		int count = 0;
		for (int i = begin; i < end; i++) {
			if (s.docIdList[i] != 0) {
				temp[count++] = s.docIdList[i];
			}
		}
		MPI_Send(&count, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);// 先发一个长度过去
		MPI_Send(temp, count, MPI_UNSIGNED, 0, 1, MPI_COMM_WORLD);// 再把数据发过去
		delete temp;
	}


	return s;
}


int main(int argc, char* argv[])
{
	//testMPI(argc,argv);
	// 读取二进制文件
	fstream file;
	file.open("ExpIndex", ios::binary | ios::in);
	if (!file.is_open()) {
		printf("Wrong in opening file!\n");
		return 0;

	}
	static vector<InvertedIndex>* invertedLists = new vector<InvertedIndex>();
	for (int i = 0; i < 2000; i++)		//总共读取2000个倒排链表
	{
		InvertedIndex* t = new InvertedIndex();				//一个倒排链表
		file.read((char*)&t->length, sizeof(t->length));
		for (int j = 0; j < t->length; j++)
		{
			unsigned int docId;			//文件id
			file.read((char*)&docId, sizeof(docId));
			t->docIdList.push_back(docId);//加入至倒排表
		}
		sort(t->docIdList.begin(), t->docIdList.end());//对文档编号排序
		invertedLists->push_back(*t);		//加入一个倒排表
	}
	file.close();
	printf("here\n");

	// 读取查询数据
	file.open("ExpQuery", ios::in);
	static int query[1000][5] = { 0 };// 单个查询最多5个docId,全部读取
	string line;
	int count = 0;

	while (getline(file, line)) {// 读取一行
		stringstream ss; // 字符串输入流
		ss << line; // 传入这一行
		int i = 0;
		int temp;
		ss >> temp;
		while (!ss.eof()) {
			query[count][i] = temp;
			i++;
			ss >> temp;
		}
		count++;// 总查询数
	}

	//------初始化MPI------
	MPI_Init(&argc, &argv);
	int rank, size;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	printf("-----process%d start-----\n", rank);

	//------求交------
	long long head, tail, freq;
	QueryPerformanceFrequency((LARGE_INTEGER*)&freq);
	QueryPerformanceCounter((LARGE_INTEGER*)&head);// Start Time

	//preprocessing(*invertedLists, 2000);
	for (int i = 0; i < count; i++) {// count个查询
		int num = 0;// query查询项数
		for (int j = 0; j < 5; j++) {
			if (query[i][j] != 0) {
				num++;
			}
		}
		int* list = new int[num];// 要传入的list
		for (int j = 0; j < num; j++) {
			list[j] = query[i][j];
		}
		sorted(list, *(invertedLists), num);// 按长度排序
		MPI_Barrier(MPI_COMM_WORLD);// 保证在同一个函数步内
		InvertedIndex res = SVS_MPI(list, *invertedLists, num, rank, size);
		printf("%d\n",i);
	}

	printf("-----process%d finished-----\n", rank);

	// 让一个进程输出
	QueryPerformanceCounter((LARGE_INTEGER*)&tail);// End Time
	printf("%f\n", (tail - head) * 1000.0 / freq);

	MPI_Finalize();
}