vector<unsigned> dgapDecompressOMP(const vector<unsigned>& compressedLists, int& idx)
{
	//前32位是长度
	unsigned len = readBitData(compressedLists, idx, 32);
	vector<unsigned> result;
	result.resize(len);
	//printf("%d\n", len);
	if (len == 0)
		return result;
	//6位是用的Bit数
	int bitNum = (int)readBitData(compressedLists, idx + 32, 6);
	idx += 38;

	int seq_num = len / NUM_THREADS;// 每个线程处理元素数目
	if (seq_num == 0) {// 特殊情况，每段0个
		unsigned delta = readBitData(compressedLists, idx, bitNum);
		idx += bitNum;
		result[0] = delta;//第一个delta直接进去
		for (int i = 1; i < len; i++){
			delta = readBitData(compressedLists, idx, bitNum);
			idx += bitNum;
			result[i] = result[i - 1] + delta;//后续的都要加上前一个放进去
		}
		return result;
	}

#pragma omp parallel num_threads(NUM_THREADS)
	{
		int tid = omp_get_thread_num();// 当前线程tid
		int localIdx = idx + bitNum * tid * seq_num;
		unsigned delta = readBitData(compressedLists, localIdx, bitNum);// 找出该段第一个元素
		localIdx += bitNum;// 读走一个delta
		result[tid * seq_num] = delta;
		for (int j = 0; j < seq_num - 1; j++) {// 线程内进行前缀和
			delta = readBitData(compressedLists, localIdx, bitNum);
			localIdx += bitNum;
			result[tid * seq_num + j + 1] = delta + result[tid * seq_num + j];
		}
#pragma omp barrier
	}
#pragma omp single
	// 处理边界位置，方便后面并行使用
	for (int i = 2; i <= NUM_THREADS; i++)// 好像有隐式路障？
		result[i * seq_num - 1] += result[(i - 1) * seq_num - 1];

#pragma omp parallel num_threads(NUM_THREADS)
	{
		int tid = omp_get_thread_num();
		if (tid != 0) {// 0号线程不用做
			int j = 0;
			// 使用simd做，一次加4个元素，注释以下部分即回到串行执行
			__m128i scalarValue = _mm_set1_epi32(result[tid * seq_num - 1]);
			for (; j < seq_num - 1 - 3; j += 4) {// 使用simd
				__m128i vector = _mm_loadu_si128((__m128i*)&result[tid * seq_num + j]);
				__m128i sum = _mm_add_epi32(scalarValue, vector);
				_mm_storeu_si128((__m128i*)&result[tid * seq_num + j], sum);
			}
			for (; j < seq_num - 1; j++)// 处理剩余元素
				result[tid * seq_num + j] += result[tid * seq_num - 1];
		}
	}
	idx += bitNum * NUM_THREADS * seq_num;// 调整idx指针
	// 串行处理剩余元素
#pragma single
	if (len % NUM_THREADS != 0) {
		for (int i = NUM_THREADS * seq_num; i < len; i++) {
			unsigned delta= readBitData(compressedLists, idx, bitNum);
			idx += bitNum;
			result[i] = result[i - 1]+delta;
		}
	}
	return result;
}